1. Single namespace
2. Resource Definitions
       " Class Definitions" :
              Assets
              Transactions
              Participants
       Events
       Enumerated
       Concepts


----------------------
Resource definition datatype:
1. String
2. Double
3. Integer
4. Long
5. DateTime 
6. Boolean


Composer-API

1. Composer-admin
identity management, rather than business logic
2. Composer-client
API to execute a lot of command line operations that we did. 
3. Composer-Runtime

            getFactory()
                factory.newConcept()
                factory.newEvent()
                factory.newRelationship()
                factory.newResource()
                factory.newTransaction()
                
            getParticipantRegistry() and getAssetRegistry()
                registry.add()
                registry.addAll()
                registry.remove()
                registry.get()
                registry.update()
several classes used to interact with business network and get info we need to manipulate it. 
e.g: factory class, participant registry, asset registry
4. Composer-common
Represent a lot of base classes, 

1.
/**
 * Make an Order for a new Watch
 * @param {org.watchain.firstHand.CreateOrder} Createorder - the order
 * @transaction
 */
async function createOrder(CreateOrder) {  // eslint-disable-line no-unused-vars
    var factory = getFactory();
    var NS = 'org.watchain.firstHand';
  	var NS1 = 'org.watchain.users';

    //create order
    var order = factory.newResource(NS, 'Order', '1');
    order.watch = factory.newRelationship(NS, 'Watch', '0000000001');
    order.manufacturer = factory.newRelationship(NS1, 'Manufacturer', '5');
    order.orderer = factory.newRelationship(NS1, 'Collector', '2');
    order.contract = factory.newRelationship(NS, 'Contract', '3');
  	order.orderStatus = 'SUBMITTED';
    return getAssetRegistry(NS + '.Order')
          .then(function (p) {
              // add the growers
              return p.addAll([order]);
          });
 
}

2.
/**
 * Make an Order for a new Watch
 * @param {org.watchain.firstHand.CreateOrder} Createorder - the order
 * @transaction
 */
async function createOrder(CreateOrder) {  // eslint-disable-line no-unused-vars

    let order = CreateOrder.order;
    if (order.watch.status !== 'NEW') {
        throw new Error('Watch not available to purchase as new from manufacturer');
    }

    let watch = order.watch;
    watch.status = 'ORDERED';
    let watchRegistry = await getWatchRegistry('org.firstHand.Watch');
    await watchregistry.update(watch);



    order.watch.status == 'ORDERED'
    const watchRegistry = await getAssetRegistry('org.watchain.firstHand.Order.watch');
    await watchRegistry.update(status);

    // save the new order
    const orderRegistry = await getAssetRegistry('org.watchain.firstHand.Order');
    await orderRegistry.create(order);
}

//terminate budding

    let oldPrice = listing.watch.lastPrice
    let watch 
    const watchRegistry = await getAssetRegistry('org.watchain.auction.Watch');
    await watchRegistry.update(listing.watch);