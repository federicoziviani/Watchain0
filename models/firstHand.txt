/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Order model for vehicle lifecycle
 */
namespace org.watchain.firstHand
//import org.watchain.users.*

abstract participant User identified by userId {
  o String userId
}

abstract participant Person extends User {
  o String title optional
  o String firstName  optional
  o String lastName  optional
  o String nationality optional
  o Address address optional
  o ContactDetails contactDetails optional
  o BirthDetails birthDetails optional
  o DeathDetails deathDetails optional
  o Gender gender optional
}
   
/**
 * An abstract participant type in this business network
 */
abstract participant Business extends User {
  o Address headquarters optional
  o String companyName optional
  o ContactDetails contactDetails optional
  o BirthDetails foundationDate optional
  o DeathDetails terminationDate optional
  --> Manager[] managers optional
}

abstract participant Employee extends Person {
  --> Business employer
  --> Manager manager optional
  o DateTime joiningDate optional
  o String employmentStatus optional
  o String department optional
  o String jobRole optional
}

abstract participant Manager extends Employee {
  --> Employee[] directReports optional
}

participant Manufacturer extends Business{
  o Double availableBalance
  o Integer stock optional
  o Integer sold optional
  o Integer totalProduction optional
}

participant Auctioneer extends Person {
}

participant Insurer extends Business {
}

participant Collector extends Person {
  o Double availableBalance
  o Double frozenBalance optional
} 

participant Courier extends Business {
}

participant Fca extends Business {
}

concept ContactDetails {
  o String email  optional
  o String mobilePhone  optional
  o String homePhone optional
  o String workPhone optional
  o Address address optional
} 

concept BirthDetails {
  o DateTime dateOfBirth optional
  o String placeOfBirth optional
}

concept DeathDetails {
  o DateTime dateOfDeath optional
  o String placeOfDeath optional
}

concept Address {
  o String city 
  o String country 
  o String locality optional
  o String region optional
  o String street optional
  o String street2 optional
  o String street3 optional
  o String postalCode optional
  o String postOfficeBoxNumber optional
}
 
enum Gender {
 o MALE
 o FEMALE
 o OTHER
}

asset Watch identified by serialNumber {
  //the serial number possible combinations (10!) set network capacity to 3,628,800 watches
  o String serialNumber //regex=/([0-9]{10})/
  //the ref identifies uniquely a watch model with material and movement
  o String ref //regex=/((0)[1-3](ST|PL|GO))/
  o WatchStatus status
  o Double lastPrice optional
  o Double retailPrice
  --> Manufacturer manufacturer
  --> User owner
}

enum Movement{
  o AUTOMATIC_01
  o CHRONO_02
  o TURBILLON_03
}

enum Material{
  o STEEL_ST
  o PLATINUM_PL
  o GOLD_GO
}  

enum WatchStatus {
  o NEW 
  o ORDERED
  o PRIVATE
  o USED
  o STOLEN
  o RECOVERED
}
 
transaction CreateWatch {
  o Watch watch
}

/**
 * An order for a watch to be fulfilled by a manufacturer
 * and dispatched to an orderer (User).
 */
asset Order identified by orderId {
  o String orderId
  --> Watch watch
  //--> Manufacturer manufacturer  
  --> Collector orderer
  --> Courier courier optional
  o Contract contract optional
  o OrderStatus orderStatus 
  o Boolean courierAssigned optional //TODO (LG): Unit test this
}

/**
 * Status of an order placed to a Manufacturer by a collector 
 */
enum OrderStatus {
  o SUBMITTED
  o ACCEPTED
  o READY
  o ON_DELIVERY 
  o DELIVERED
  o RECEIVED
  o PAID
  o OWNER_ASSIGNED //ownwer is assigned when payment and watch are received
}
 
transaction CreateOrder {
  o Order order
}

event CreateOrderEvent {
  o String orderId
  --> Collector collector
}

/**
 * Transactions to update the status of an order
 */

transaction AcceptOrder {
  o OrderStatus orderStatus //default = 'ACCEPTED'
  --> Order order
}
event AcceptOrderEvent {
  o Order orderStatus
}

transaction OrderReady {
  o OrderStatus orderStatus //default = 'READY'
  --> Order order
}
 
event OrderReadyEvent {
  o OrderStatus Status
}
  
/**
 * Defines a contract between a Manufacturer, a Collector and a deliverer to deliver the new watches * in the order using a Courier, paying a set watch price.
 */
asset Contract identified by contractId {
  o String contractId
  o Boolean terminated
  --> Order order 
  --> Courier courier
}

transaction CreateContract {
o Contract contract
}

transaction Delivered {
  //o Courier courier
  --> Order order
} 

event DeliveredEvent {
    o String message
    --> Order order
}
  
transaction Received {
  --> Order order
}

transaction ReportTheft {
  --> Watch watch
}

event ReportTheftEvent {
  o String message
  --> Watch watch
}

transaction RecoverTheft {
  --> Watch watch
}

enum ListingState {
  o FOR_SALE
  o RESERVE_NOT_MET
  o SOLD
} 

asset WatchListing identified by listingId {
  o String listingId
  o Double reservePrice
  o String description
  o ListingState state
  o Offer[] offers optional
  --> Watch watch
}

transaction Offer {
  o Double bidPrice
  --> WatchListing listing
  --> Collector collector
}
     
transaction TerminateBidding {
  --> WatchListing listing
  o Double lastPrice
}
